
[-- Image: graphics1 --]Sistemas Operativos

Formulario de auto-evaluación

Molulo 2. Sesión 2. Llamadas al sistema para el S.Archivos Parte
II

Nombre y apellidos:

Ernesto Serrano

a) Cuestionario de actitud frente al trabajo.

El tiempo que he dedicado a la preparación de la sesión antes de
asistir al laboratorio ha sido de …... minutos.

1. He resuelto todas las dudas que tenía antes de iniciar la
sesión de prácticas: …... (si/no). En caso de haber contestado
“no”, indica los motivos por los que no las has resuelto:

2. Tengo que trabajar algo más los conceptos sobre:

3. Comentarios y sugerencias:

b) Cuestionario de conocimientos adquiridos.

Mi solución al ejercicio 1 ha sido:

El programa crea 2 archivos (archivo1 y archivo2) y les asigna
los siguientes permisos

----r-S--- 1 ernesto staff 0 11 nov 18:43 archivo1

-rwxrw-r-- 1 ernesto staff 0 11 nov 18:43 archivo2

Mi solución a la ejercicio 2 ha sido:

/*

 * Sistemas Operativos

 * Grado en Ingeniería Informática

 *

 * 2013 © Copyleft - All Wrongs Reserved

 *

 * Ernesto Serrano <erseco@correo.ugr.es>

 *

 * Este programa pide como argumentos un pathname y un numero
octal para definir permisos,

 * se pide que se cambien los permisos de los archivos
conetenidos en el directorio indicado

 * y se muestre una lista de los archivos cambiados indicando
los permisos antiguos y los nuevos

 */

#include <unistd.h>

#include <sys/stat.h>

#include <stdio.h>

#include <errno.h>

#include <stdlib.h>

#include <dirent.h>

int main(int argc, char *argv[])

{

//Declaracion de variables

struct stat atributos;

struct dirent *direntp;

DIR *dirp;

int stat_result, chmod_result, permisos_antiguos,
permisos_nuevos;

//Comprobamos si se le ha pasado un pathname y unos permisos
como parámetros

if(argc!=3) {

//Si no se le han pasado los parámetros correctos muestra un
mensaje de ayuda

printf("Modo de uso: %s <pathname> <permisos>\n", argv[0]);

exit(1);

}

//Abrimos el directorio

dirp = opendir(argv[1]);

if (dirp == NULL){

printf("Error: No se puede abrir el directorio: %s\n",argv[1]);

exit(2);

}

//Leemos las entradas del directorio */

printf("<nombre>\t<ant>\t<new>\n");

while ((direntp = readdir(dirp)) != NULL) {

//Cambiamos el working directory al que le pasamos

//aunque tambien le podriamos haber pasado el full path al stat

chdir(argv[1]);

stat_result = stat(direntp->d_name,&atributos);

if(stat_result < 0) {

printf("Error al intentar acceder a los atributos de
%s\n",direntp->d_name);

} else {

//Comprobamos que no sea un directorio (ni los enlaces . y ..)

if(!S_ISDIR(atributos.st_mode)){

//Asignamos los permisos nuevos pasados como parametro

permisos_nuevos = strtol(argv[2], 0, 8) & 0777;

//Guardamos los permisos antiguos

permisos_antiguos = atributos.st_mode & 0777;

//Intentamos cambiar los permisos

chmod_result = chmod(direntp->d_name, permisos_nuevos);

if(chmod_result < 0) {

//No se han podido cambiar los permisos, usamos %o para que
muestre el valor octal

printf("%s : \t%d \t%o\n", direntp->d_name,chmod_result,
permisos_antiguos);

exit(-1);

} else {

//Se han cambiado los permisos, usamos %o para que muestre el
valor octal

printf("%s : \t%o \t%o\n", direntp->d_name, permisos_antiguos,
permisos_nuevos);

}

};

}

}

//Cerramos el directorio

closedir(dirp);

return 0;

}

Mi solución a la ejercicio 3 ha sido:

/*

 * Sistemas Operativos

 * Grado en Ingeniería Informática

 *

 * 2013 © Copyleft - All Wrongs Reserved

 *

 * Ernesto Serrano <erseco@correo.ugr.es>

 *

 * Programa una nueva orden que recorra la jerarquia de
subdirectorios existentes a partir

 * de uno dado como argumento y devuelva la cuenta de todos
aquellos archivos regulares que

 * tengan permiso de ejecucion para el grupo y para otros.
Ademas del nombre de los archivos

 * encontrados, debera devolver sus numeros de inodo y la suma
total de espacio ocupado por

 * dichos archivos.

 */

#include <unistd.h>

#include <sys/stat.h>

#include <stdio.h>

#include <errno.h>

#include <stdlib.h>

#include <dirent.h>

#include <ftw.h>

//Declaramos variables globales

int n_files = 0;

int size = 0;

int visitar(const char* path, const struct stat* stat, int
flags, struct FTW* ftw) {

//Comprobamos que los archivos sean regulares y sean ejecutables
para grupo y otros

if ((S_ISREG(stat->st_mode)) && (stat->st_mode & S_IXGRP) &&
(stat->st_mode & S_IXOTH)) {

//Los inodos son unsigned long long, así que para que los pinte
sprintf hay que usar llu

printf("%s %llu\n",path, stat->st_ino);

//Incrementamos las variables globales

size += stat->st_size;

n_files++;

}

return 0;

}

int main(int argc, char *argv[])

{

printf("Los i-nodos son:\n");

//Llamamos a nftw pasandole como parametro la funcion visitar

//Si le hemos pasado una ruta como parametro la usará en lugar
del directorio actual (.)

if (nftw(argc >= 2 ? argv[1] : ".", visitar, 10, 0) != 0) {

perror("nftw");

}

printf("Existen %d archivos regulares con permiso x para grupo y
otros\n",n_files);

printf("El tamaño total ocupado por dichos archivos es %d
bytes\n",size);

return 0;

}

